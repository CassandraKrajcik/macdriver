// Code generated by DarwinKit. DO NOT EDIT.

package coreimage

import (
	"github.com/progrium/macdriver/objc"
)

// The properties you use to configure a sharpen luminance filter. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cisharpenluminance?language=objc
type PSharpenLuminance interface {
	// optional
	SetSharpness(value float64)
	HasSetSharpness() bool

	// optional
	Sharpness() float64
	HasSharpness() bool

	// optional
	SetInputImage(value Image)
	HasSetInputImage() bool

	// optional
	InputImage() Image
	HasInputImage() bool

	// optional
	SetRadius(value float64)
	HasSetRadius() bool

	// optional
	Radius() float64
	HasRadius() bool
}

// ensure impl type implements protocol interface
var _ PSharpenLuminance = (*SharpenLuminanceObject)(nil)

// A concrete type for the [PSharpenLuminance] protocol.
type SharpenLuminanceObject struct {
	objc.Object
}

func (s_ SharpenLuminanceObject) HasSetSharpness() bool {
	return s_.RespondsToSelector(objc.Sel("setSharpness:"))
}

// The amount of sharpening to apply. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cisharpenluminance/3228711-sharpness?language=objc
func (s_ SharpenLuminanceObject) SetSharpness(value float64) {
	objc.Call[objc.Void](s_, objc.Sel("setSharpness:"), value)
}

func (s_ SharpenLuminanceObject) HasSharpness() bool {
	return s_.RespondsToSelector(objc.Sel("sharpness"))
}

// The amount of sharpening to apply. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cisharpenluminance/3228711-sharpness?language=objc
func (s_ SharpenLuminanceObject) Sharpness() float64 {
	rv := objc.Call[float64](s_, objc.Sel("sharpness"))
	return rv
}

func (s_ SharpenLuminanceObject) HasSetInputImage() bool {
	return s_.RespondsToSelector(objc.Sel("setInputImage:"))
}

// The image to use as an input image. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cisharpenluminance/3228709-inputimage?language=objc
func (s_ SharpenLuminanceObject) SetInputImage(value Image) {
	objc.Call[objc.Void](s_, objc.Sel("setInputImage:"), objc.Ptr(value))
}

func (s_ SharpenLuminanceObject) HasInputImage() bool {
	return s_.RespondsToSelector(objc.Sel("inputImage"))
}

// The image to use as an input image. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cisharpenluminance/3228709-inputimage?language=objc
func (s_ SharpenLuminanceObject) InputImage() Image {
	rv := objc.Call[Image](s_, objc.Sel("inputImage"))
	return rv
}

func (s_ SharpenLuminanceObject) HasSetRadius() bool {
	return s_.RespondsToSelector(objc.Sel("setRadius:"))
}

// The distance from the center of the effect. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cisharpenluminance/3228710-radius?language=objc
func (s_ SharpenLuminanceObject) SetRadius(value float64) {
	objc.Call[objc.Void](s_, objc.Sel("setRadius:"), value)
}

func (s_ SharpenLuminanceObject) HasRadius() bool {
	return s_.RespondsToSelector(objc.Sel("radius"))
}

// The distance from the center of the effect. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cisharpenluminance/3228710-radius?language=objc
func (s_ SharpenLuminanceObject) Radius() float64 {
	rv := objc.Call[float64](s_, objc.Sel("radius"))
	return rv
}
